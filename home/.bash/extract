#!/bin/bash


set -ex
set -o pipefail


prev=$(find . -maxdepth 1 | sort)
curr="$prev"


_added() {
	echo "$( comm -13 <(echo "$prev") <(echo "$curr") )"
}

_cleanup() {
	# remove any files created by this script (in case of errors)
	curr=$(find . -maxdepth 1 | sort)
	local added="$(_added)"
	if [[ -n $added ]]; then
		echo "extract generated these files before encountering an error:"
		echo "$added"
		echo -n "Delete temporary files? [Y/n] "
		read REPLY
		if [[ $REPLY == 'y' || $REPLY == 'Y' ]]; then
			echo "$added" | xargs rm -Rfv
		fi
	fi
}

_trap() {
	if [[ $? == 0 ]]; then
		# Normal exit code
		return
	fi
	_cleanup
}

trap _trap EXIT


_extract() {
	local file="$1"

	case "$file" in
		*.tar)
			tar -xvf "$file"
			;;
		*.tar.gz | *.tgz)
			tar -xzvf "$file"
			;;
		*.tar.bz2 | *.tbz | *.tbz2)
			tar -xjvf "$file"
			;;
		*.tar.xz | *.txz)
			( tar --xz --help &>/dev/null && tar --xz -xvf "$file" ) \
			|| \
			( xzcat "$file" | tar -xvf - )
			;;
		*.tar.zma | *.tlz)
			( tar --lzma --help &>/dev/null && tar --lzma -xvf "$file" ) \
			|| \
			(lzcat "$file" | tar -xvf - )
			;;
		*.gz)
			gunzip "$file"
			;;
		*.bz2)
			bunzip2 "$file"
			;;
		*.xz)
			unxz "$file"
			;;
		*.lzma)
			unlzma "$file"
			;;
		*.Z)
			uncompress "$file"
			;;
		*.zip)
			unzip "$file"
			;;
		*.rar)
			unrar x -ad "$file"
			;;
		*.7z)
			7za x "$file"
			;;
		*.jar)
			jar -xvf "$file"
			;;
		*.exe)
			cabextract "$file"
			;;
		#*.deb)
			#tmp="$file_tmp_deb"
			#mkdir "$tmp"
			#mkdir -p "$tmp/control"
			#mkdir -p "$tmp/data"
			#cd "$tmp"; ar vx "../${tmp}" > /dev/null
			#cd control; tar -xzvf ../control.tar.gz
			#cd ../data; tar -xzvf ../data.tar.gz
			#cd ..
			#;;
		*)
			echo "File format not supported." >&2
			return 1
			;;
	esac
}

_extract_fallback() {
	echo "Falling back to 7z"
	7z x "$1"
}


if [[ ! -f $1 ]]; then
	echo 'File argument is required.'
	exit 1
fi

file="$1"
base=$(dirname "$file")

while [[ $1 != "" ]];  do
	case "$1" in
		-o | --output-dir)
			shift
			output_dir="$1"
			;;
		-f | --force)
			force_output_dir=true
			;;
		-v | --verbose)
			verbose=true
			exec 3>&1
			;;
	esac
	shift
done

if [[ -z $output_dir ]]; then
	output_dir="./${file%.*}"
fi

if [[ -e $output_dir ]]; then
	if [[ ! $force_output_dir ]]; then
		echo "$output_dir already exists. Use --force if you're sure."
		exit 1
	fi
	rm -Rf "$output_dir"
fi

if [[ -n $verbose ]]; then
	exec 3>&1
else
	exec 3>/dev/null
fi

prev=$(find . -maxdepth 1 | sort)

if [ ! $(_extract "$file" 1>&3) ]; then
	_cleanup
	echo "Falling back to 7z..." 1>&3
	7z x "$file" 1>&3
fi

curr=$(find . -maxdepth 1 | sort)
added="$(_added)"

if [[ -z $added ]]; then
	echo "Extract operation produced no files! Should never happen..."
	exit 1
fi

count=$(echo "$added" | wc -l)

if [[ $count -gt 1 ]]; then
	# operation dumped a bunch of files into the cwd
	mkdir -p "$output_dir"
	echo "$added" | xargs mv -n --target-directory="$output_dir"
elif [[ $count -eq 1  && ! -e $output_dir ]]; then
	# operation produced one file, but it's not named $output_dir
	mv "$added" "$output_dir"
fi

echo "$file -> $output_dir"
