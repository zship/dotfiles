#!/bin/bash

set -e
set -o pipefail


__DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
__FILE="$__DIR/"$( basename "${BASH_SOURCE[0]}" )""


prev=$(find . -maxdepth 1 | sort)
curr="$prev"


_added() {
	echo "$( comm -13 <(echo "$prev") <(echo "$curr") )"
}

_cleanup() {
	# remove any files created by this script (in case of errors)
	curr=$(find . -maxdepth 1 | sort)
	local added="$(_added)"
	if [[ -n $added ]]; then
		echo "extract generated these files before encountering an error:"
		echo "$added"
		echo -n "Delete temporary files? [Y/n] "
		read REPLY
		if [[ $REPLY == 'y' || $REPLY == 'Y' ]]; then
			echo "$added" | xargs rm -Rfv
		fi
	fi
}

_trap() {
	if [[ $? == 0 ]]; then
		# Normal exit code
		return
	fi
	_cleanup
}

trap _trap EXIT


_extract() {
	local file="$1"

	case "$file" in
		*.tar)
			tar -xvf "$file"
			;;
		*.tar.gz | *.tgz)
			tar -xzvf "$file"
			;;
		*.tar.bz2 | *.tbz | *.tbz2)
			tar -xjvf "$file"
			;;
		*.tar.xz | *.txz)
			( tar --xz --help &>/dev/null && tar --xz -xvf "$file" ) \
			|| \
			( xzcat "$file" | tar -xvf - )
			;;
		*.tar.zma | *.tlz)
			( tar --lzma --help &>/dev/null && tar --lzma -xvf "$file" ) \
			|| \
			(lzcat "$file" | tar -xvf - )
			;;
		*.gz)
			gunzip "$file"
			;;
		*.bz2)
			bunzip2 "$file"
			;;
		*.xz)
			unxz "$file"
			;;
		*.lzma)
			unlzma "$file"
			;;
		*.Z)
			uncompress "$file"
			;;
		*.zip)
			unzip "$file"
			;;
		*.rar)
			unrar x -ad "$file"
			;;
		*.7z)
			7za x "$file"
			;;
		*.jar)
			jar -xvf "$file"
			;;
		*.exe)
			cabextract "$file"
			;;
		*.deb)
			tmp="$(pwd)/file_tmp_deb"
			mkdir "$tmp"
			pushd "$tmp"
			ar vx "../$file"
			mkdir -p "$tmp/control"
			cd "$tmp/control"; tar -xzvf ../control.tar.gz; rm ../control.tar.gz
			mkdir -p "$tmp/data"
			cd "$tmp/data"; tar -xzvf ../data.tar.gz; rm ../data.tar.gz
			popd
			;;
		*)
			echo "File format not supported." >&2
			return 1
			;;
	esac
}


if [[ ! -f $1 ]]; then
	echo 'File argument is required.'
	exit 1
fi


args="$@"
file="$1"
base=$(dirname "$file")
output_dir=""
force_output_dir=""

while [[ -n $1 ]];  do
	case "$1" in
		-o | --output-dir)
			shift
			output_dir="$1"
			;;
		-f | --force)
			force_output_dir="true"
			;;
	esac
	shift
done

if [[ -z $output_dir ]]; then
	output_dir="./${file%.*}"
fi

if [[ -e $output_dir ]]; then
	if [[ -z $force_output_dir ]]; then
		echo "$output_dir already exists. Use --force if you're sure."
		exit 1
	fi
	rm -Rf "$output_dir"
fi

prev=$(find . -maxdepth 1 | sort)

set +e; (set -e && _extract "$file"); ret=$?; set -e
if [[ $ret != 0 ]]; then
	_cleanup
	echo "Falling back to 7z..."
	7z x "$file"
fi

curr=$(find . -maxdepth 1 | sort)
added="$(_added)"

if [[ -z $added ]]; then
	echo "Extract operation produced no files! Should never happen..."
	exit 1
fi

count=$(echo "$added" | wc -l)

if [[ $count > 1 ]]; then
	# operation dumped a bunch of files into the cwd
	mkdir -p "$output_dir"
	echo "$added" | xargs mv -n --target-directory="$output_dir"
elif [[ $count == 1  && ! -e $output_dir ]]; then
	# operation produced one file, but it's not named $output_dir
	mv "$added" "$output_dir"
fi

echo "$file -> $output_dir"
